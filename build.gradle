plugins {
    id 'com.gradleup.shadow' version '8.3.0'
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'me.sunrise'
version = '1.0'
description = "Gerencia cosm√©ticos (tags, chat color, badges) para players."

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "matteodev"
        url = "https://maven.devs.beer"
    }
    // Placeholder API
    maven {
        url = 'https://repo.extendedclip.com/releases/'
    }
    // Annotation Command Framework
    maven {
        url = "https://repo.aikar.co/content/groups/aikar/" }
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    implementation "net.kyori:adventure-text-minimessage:4.22.0"
    compileOnly "dev.lone:api-itemsadder:4.0.10"
    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"
}

shadowJar {
    relocate 'co.aikar.commands', 'me.sunrise.cosmeticsmanager.acf'
    relocate 'co.aikar.locales', 'me.sunrise.cosmeticsmanager.locales'
}

tasks.named("build") {
    dependsOn "shadowJar"
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
